package main

import (
	"fmt"
	"time"
)

/*
* Channels: Canales en Go

üìñ FRASE: No se comunique compartiendo memoria, comparta memoria comunic√°ndose.

Los canales en Go permiten la comunicaci√≥n y sincronizaci√≥n entre goroutines,
facilitando el intercambio seguro de datos.

En lugar de usar t√©cnicas tradicionales de sincronizaci√≥n (como mutex) para proteger memoria compartida,
los canales permiten que las gorrutinas compartan memoria a trav√©s de la comunicaci√≥n.

* Tipos de canales
- chan T: Canal bidireccional (puede enviar y recibir valores de tipo T).
- chan<- T: Canal de solo env√≠o (solo puede enviar valores).
- <-chan T: Canal de solo recepci√≥n (solo puede recibir valores).

- Los canales se crean con la funci√≥n `make()` y su tipo de dato es `chan`.
- El operador `<-` se usa para enviar datos a un canal (canal <- dato) y tambi√©n
para recibir datos de un canal (dato <- canal).
- Un canal declarado pero no inicializado es `nil`.
- Enviar como recibir desde un canal `nil` bloqueara el programa.
- Un canal se bloquea si no hay una goroutine disponible para recibir o enviar datos.
- La funci√≥n `close()` se usa para cerrar un canal, indicando que no se enviar√°n m√°s datos a trav√©s de √©l.
- Enviar datos a un canal que se ha cerrado con `close()` causar√° un `panic`.
- Recibir datos de un canal cerrado devolvera el `valor cero` del tipo del canal.
- NO es obligatorio cerrar un canal, el recolector de basura se encargara de esto cuando no se utilice el canal.

* Tipos de canales: con y sin b√∫fer
En Go, los canales pueden ser con b√∫fer o sin b√∫fer, y su comportamiento var√≠a seg√∫n el tipo:

- Canal sin b√∫fer: La operaci√≥n de env√≠o se bloquea hasta que otro goroutine reciba el valor.
Es decir, el env√≠o y la recepci√≥n deben ocurrir al mismo tiempo.
- Canal con b√∫fer: Puede almacenar varios valores sin necesidad de que otro goroutine los reciba de inmediato.
Solo se bloquea cuando el b√∫fer est√° lleno.

* IMPORTANTE:
- Evita el deadlock: Un deadlock ocurre cuando todas las goroutines est√°n esperando unas a otras
y ninguna puede continuar. Este es un error com√∫n al trabajar con canales mal sincronizados.
- Canales unidireccionales: Son canales que se pueden usar exclusivamente para enviar o para recibir datos.
Son √∫tiles para restringir el acceso a un canal

* Se√±alizar
Significa notificar a una goroutine (o a varias) que un evento ha ocurrido, sin necesidad de transferir datos.

* Notificar o se√±alizar eventos:
- Cuando usamos canales (chan) en Go, a menudo queremos comunicar informaci√≥n entre goroutines.
Sin embargo, en algunos casos no necesitamos enviar datos, sino solo indicar que algo ha ocurrido.
- 'chan struct{}' nos permite se√±alizar eventos sin desperdiciar memoria.
- Es m√°s eficiente que 'chan bool' porque no consume memoria.

* Cerrar un canal: close()
- Solo se pueden cerrar canales que NO sean de solo recepci√≥n.
- Cerrar un canal nil o ya cerrado causa panic.


* Transferencia de Valores
Copia de Valores

- Los valores se copian cuando se transfieren entre gorrutinas.
- Para canales con buffer: dos copias (emisor‚Üíbuffer, buffer‚Üíreceptor).
- Para canales sin buffer: una copia (emisor‚Üíreceptor directamente).
- Solo se copia la parte directa del valor.
*/

func main() {
	// Valor cero de un canal es nil.
	var channel chan int             // ch3 == nil
	fmt.Println("channel:", channel) // Output: <nil>

	// Creamos un canal de tipo string sin b√∫fer.
	// Esto significa que las operaciones de env√≠o se bloquear√°n hasta que alguien reciba el valor.
	ch := make(chan string)

	// * Enviamos datos al canal desde una goroutine.
	go func() {
		time.Sleep(1 * time.Second) // Simulamos una operaci√≥n que tarda 1 segundo en completarse.
		ch <- "Hello, World!"       // Enviamos el mensaje "Hello, World!" al canal `ch`.
	}()

	// * Recibimos un valor del canal.
	// `msg` almacena el valor recibido desde el canal.
	// `ok` indica si la recepci√≥n fue exitosa (true) o si el canal fue cerrado (false).
	msg, ok := <-ch

	// Imprimimos el valor recibido y el estado del canal.
	fmt.Println("mensaje:", msg)      // Output: Hello, World!
	fmt.Println("canal abierto:", ok) // Output: true

	// * Canales unidireccionales.
	num := make(chan int)

	// Este canal solo puede recibir datos.
	go receive(num)

	// Este canal solo puede enviar datos.
	send(num)

	//* Creando un canal con b√∫fer.
	// Lo que define el tama√±o del b√∫fer es cu√°ntos valores pueden estar en el canal al mismo tiempo
	// sin que el env√≠o se bloquee.
	ch2 := make(chan int, 2) // Puede almacenar hasta 2 enteros al mismo tiempo antes de bloquearse.

	// Enviando datos al canal con b√∫fer.
	// Estas operaciones no se bloquean porque el canal a√∫n tiene espacio disponible.
	// El env√≠o a un canal con b√∫fer solo se bloquea cuando el b√∫fer est√° lleno.
	ch2 <- 4
	ch2 <- 2

	// ch2 <- 6 // Esta l√≠nea causar√≠a un bloqueo si se descomenta,
	// porque el canal ya ha alcanzado su capacidad m√°xima (2 valores).

	// Recibiendo datos del canal.
	// Las operaciones de recepci√≥n solo se bloquear√°n cuando el b√∫fer est√© vac√≠o.
	fmt.Println(<-ch2) // Imprime el primer valor almacenado en el canal (4).
	fmt.Println(<-ch2) // Imprime el segundo valor almacenado en el canal (2).

	// * Ejemplo de uso de un canal con b√∫fer y su posterior cierre.
	// Creamos un canal de enteros con capacidad para almacenar hasta 2 valores sin bloquearse.
	ch3 := make(chan int, 2)

	// Iniciamos una goroutine que enviar√° datos al canal.
	go func() {
		for i := 1; i <= 3; i++ {
			ch3 <- i // Enviamos valores al canal. El env√≠o se bloquea solo si el b√∫fer est√° lleno.
		}

		// Cerramos el canal una vez que se han enviado todos los valores.
		// Esto es importante para que el receptor sepa que no habr√° m√°s datos.
		close(ch3)
	}()

	// Iteramos sobre todos los valores recibidos del canal `ch3`.
	// El bucle contin√∫a leyendo hasta que el canal sea cerrado.
	// Cada vez que se lee un valor del canal, se libera un espacio en el b√∫fer,
	// lo que permite que otros env√≠os (bloqueados o futuros) puedan completarse.
	for value := range ch3 {
		// Leemos un valor del canal y lo imprimimos.
		fmt.Println("valor:", value) // Output: 1, 2, 3
	}

	//* Canales de notificaci√≥n (o se√±alizaci√≥n).
	// Se utilizan para informar a otras goroutines que una tarea ha finalizado o que un evento ha ocurrido.
	// A diferencia de otros canales, no se usan para enviar datos, sino √∫nicamente como mecanismo de sincronizaci√≥n.

	// Usamos `chan struct{}` en lugar de `chan bool` porque `struct{}` no ocupa memoria adicional.
	// Es una convenci√≥n idiom√°tica en Go para este tipo de casos.
	done := make(chan struct{})

	go func() {
		fmt.Println("Goroutine en ejecuci√≥n")
		// Cuando `close` es ejecutado, `main()` detecta que el canal se cerr√≥ y puede seguir ejecutando.
		close(done) // üî¥ No enviamos datos, solo cerramos el canal.
	}()

	// No recibe datos, solo detecta que el canal fue cerrado.
	<-done // ‚è≥ Se desbloquea cuando el canal se cierra
	fmt.Println("Finalizado")
}

// send env√≠a un valor entero a trav√©s del canal.
// El par√°metro `num` es un canal unidireccional de solo env√≠o (chan<- int),
// lo que significa que esta funci√≥n solo puede enviar datos a ese canal,
// pero no puede recibir desde √©l.
func send(num chan<- int) {
	num <- 10
}

// receive recibe un valor entero desde el canal y lo imprime.
// El par√°metro `num` es un canal unidireccional de solo recepci√≥n (<-chan int),
// por lo tanto, esta funci√≥n solo puede leer datos del canal, pero no puede enviar a √©l.
func receive(num <-chan int) {
	fmt.Println(<-num)
}
