package main

import "fmt"

/*
* Interfaces en Go:
Las interfaces en Go son una forma de definir un conjunto de m√©todos que un 'tipo' debe implementar.
- las interfaces solo definen la firma de los m√©todos, pero no su comportamiento.
- Su objetivo principal es crear `abstracciones` en el c√≥digo.
- Solo debes crear interfaces cuando realmente las necesitas.

* IMPORTANTE:
En Go, las interfaces son impl√≠citas, lo que significa que no es necesario declarar que un tipo las implementa.
Si un tipo tiene todos los m√©todos definidos en una interfaz, autom√°ticamente la satisface,
sin necesidad de usar palabras clave como `implements o extends`.

- Las interfaces pueden ser implementadas por cualquier tipo.
- Un tipo puede implementar varias interfaces.
- Manten las interfaces simples (peque√±as).
- Cualquier `struct` que tenga un m√©todo `Error()` implementa la interfaz `error`.
- En Go, es com√∫n que las interfaces tengan un solo m√©todo.
Esto se conoce como interfaces m√≠nimas, lo que las hace m√°s flexibles.
- Es una buena pr√°ctica nombrar las interfaces con el sufijo `-er`, como `Printer` en lugar de `Print`.
- Las interfaces pueden ser compuestas, es decir, una interfaz puede incluir otras interfaces.
- Puedes implementar interfaces de otros paquetes, no solo las que defines t√∫.

* Interfaces vac√≠as
üîπ Una `interfaz vac√≠a` (`interface{}`) no tiene m√©todos y puede contener datos de cualquier tipo.
	- Es √∫til cuando el tipo exacto de los datos es desconocido.
    - Una interfaz vac√≠a no es considerada una expresi√≥n.
	- En c√≥digo moderno, se recomienda utilizar `any` en lugar de `interface{}`.

* ¬øCu√°ndo usar interfaces?
---------------------------
1Ô∏è‚É£ Comportamiento com√∫n: Usar interfaces cuando varios tipos implementan un comportamiento com√∫n (Polimorfismo).

*Ejemplo:
Imagina que tienes varios tipos (estructuras) en tu programa que comparten un comportamiento com√∫n.
En lugar de duplicar c√≥digo, puedes definir una interface que capture ese comportamiento.

2Ô∏è‚É£ Desacoplamiento: El desacoplamiento es cuando queremos que nuestro c√≥digo sea m√°s flexible y no est√© atado
a implementaciones espec√≠ficas, es decir, que cada componente sea independiente y pueda cambiarse
sin afectar a otros componentes.

* Ejemplo:
Si estas creando una aplicaci√≥n que necesita guardar datos e inicialmente decides guardar los datos
en un archivo y deseas cambiar la implementaci√≥n para que los datos se guarden en una base de datos,
puedes definir un interface que te permita hacer estos cambios de manera sencilla.

3Ô∏è‚É£ Restringir el comportamiento:
Cuando queremos asegurarnos de que un tipo espec√≠fico cumple con ciertos requisitos o restricciones.

* NOTA: Un c√≥digo m√°s simple es un c√≥digo m√°s f√°cil de mantener.
*/

// Printer es una interfaz m√≠nima que define un solo m√©todo Print.
type Printer interface {
	Print()
}

// Logger es una interfaz que define un solo m√©todo Log.
type Logger interface {
	Log(message string)
}

// PrinterLogger es una interfaz compuesta que incluye las interfaces Printer y Logger.
// Cualquier tipo que implemente ambos m√©todos (Print y Log) cumple con la interfaz PrinterLogger.
type PrinterLogger interface {
	Printer
	Logger
}

// MyError es una estructura personalizada que implementara la interfaz `error`.
// Contiene un campo `Msg` que almacenar√° un mensaje de error.
type MyError struct {
	Msg string
}

// `Error()` es un m√©todo que hace que MyError cumpla con la interfaz `error`.
// La interfaz `error` es una interfaz nativa de Go que solo requiere la implementaci√≥n
// de un m√©todo: `Error() string`. Cualquier tipo que implemente este m√©todo puede
// ser considerado un error en Go.
// El m√©todo Error de MyError devuelve el mensaje de error almacenado en el campo `Msg`.
func (e MyError) Error() string {
	return e.Msg
}

// Person es una estructura que contiene el nombre y la edad de una persona.
type Person struct {
	Name string
	Age  int
}

// `Print()` es un m√©todo de Person que cumple con la interfaz `Printer`.
// Esto significa que cualquier instancia de Person puede ser asignada a una variable de tipo Printer.
func (p Person) Print() {
	fmt.Printf("Hola, mi nombre es %s y tengo %d a√±os.\n", p.Name, p.Age)
}

// `Log()` es un m√©todo de Person que cumple con la interfaz Logger.
// Esto significa que cualquier instancia de Person puede ser asignada a una variable de tipo Logger.
func (p Person) Log(message string) {
	fmt.Printf("[LOG]: %s\n", message)
}

func main() {
	// Crear una instancia de Person y asignarla a una variable de tipo Printer.
	// Esto es posible porque Person implementa el m√©todo Print, que es el √∫nico
	// requisito para satisfacer la interfaz Printer.
	var p Printer = Person{
		Name: "Mayer",
		Age:  24,
	}
	p.Print() // Hola, mi nombre es Mayer y tengo 24 a√±os.

	// Crear otra instancia de Person y usar el m√©todo Print directamente.
	// Aqu√≠ no estamos usando la interfaz, sino la estructura directamente.
	// El m√©todo `Print` de Person ya implementa impl√≠citamente la interfaz Printer.
	robert := Person{
		Name: "Robert",
		Age:  59,
	}
	robert.Print() // Hola, mi nombre es Robert y tengo 59 a√±os.

	// Crear una instancia de Person y asignarla a una variable de tipo Logger.
	// Esto es posible porque Person implementa el m√©todo Log.
	var cristiano Logger = Person{
		Name: "Cristiano",
		Age:  39,
	}
	cristiano.Log("Soy el bicho...SIUUU!") // [LOG]: Soy el bicho...SIUUU!

	// Crear una instancia de Person y asignarla a una variable de tipo PrinterLogger.
	// Esto es posible porque Person implementa ambos m√©todos: Print y Log,
	// cumpliendo as√≠ con la interfaz compuesta PrinterLogger.
	var person PrinterLogger = Person{
		Name: "Messi",
		Age:  37,
	}
	person.Print()                 // Hola, mi nombre es Messi y tengo 37 a√±os.
	person.Log("Hola, soy Messi!") // [LOG]: Hola, soy Messi!

	//* Creamos una instancia de MyError con un mensaje de error.
	err := MyError{Msg: "Ocurri√≥ un error"}

	// Dado que MyError implementa el m√©todo Error, se puede asignar a una variable de tipo `error`.
	var genericError error = err

	// Imprimimos el mensaje de error.
	fmt.Println("Error personalizado:", genericError.Error()) // Ocurri√≥ un error

	// Ejemplo de interfaz nula.
	// No ha sido inicializada con ning√∫n valor. Debido a esto, su valor es nil.
	// Se recomienda utilizar `any` en vez de `interface{}`.
	var i any
	fmt.Println("Interfaz nula:", i) // Interfaz nula: <nil>

	// Esta interfaz vac√≠a contiene en su interior un valor de tipo string.
	e := any("Go")
	fmt.Println("Interfaz vac√≠a con un valor de tipo string:", e) // Output: Go

	// Ejemplo de interfaz vac√≠a.
	var emptyInterface interface{}
	emptyInterface = 42
	fmt.Println("Interfaz vac√≠a con un int:", emptyInterface) // Interfaz vac√≠a con un int: 42

	emptyInterface = "Hello, World!"
	fmt.Println("Interfaz vac√≠a con un string:", emptyInterface) // Interfaz vac√≠a con un string: Hello, World!

	//* Type Switches - Comprobando el tipo de `emptyInterface`.
	// Un "type switch" permite verificar el tipo concreto de una interfaz vac√≠a (`interface{}`).
	// Si `emptyInterface` coincide con alguno de los tipos especificados en los `case`,
	// se ejecuta el bloque correspondiente.
	switch emptyInterface.(type) {
	case int:
		fmt.Println("Es un int")
	case string:
		fmt.Println("Es un string")
	default:
		fmt.Println("No es ni un int ni un string")
	}
}
